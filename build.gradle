import java.time.ZonedDateTime

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'

version = "0.1.1"
group = "net.wukl"
archivesBaseName = 'cacofony'

task generateMetadata {
    dependsOn processResources
    doFirst {
        new File("$buildDir/resources/main/net/wukl/cacofony/metadata.xml").withOutputStream
        { out ->
            final Properties p = new Properties()
            p.setProperty("net.wukl.cacofony.version", project.version.toString())
            p.setProperty("net.wukl.cacofony.build-date",
                          String.valueOf(ZonedDateTime.now().toEpochSecond()))
            p.storeToXML(out, "Generated by Gradle")
        }
    }
}

classes.dependsOn generateMetadata

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceCompatibility = '1.11'
targetCompatibility = '1.11'

repositories {
    mavenCentral()
}

dependencies {
    // Logging.
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:jul-to-slf4j:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'org.codehaus.groovy:groovy:2.5.5'

    compile 'net.wukl:cacodi:1.1.0'

    // CSV parser.
    compile 'com.opencsv:opencsv:4.4'

    // Yaml.
    compile 'org.yaml:snakeyaml:1.23'

    // JSON.
    compile 'com.google.code.gson:gson:2.8.5'

    // Reflections.
    compile 'org.reflections:reflections:0.9.11'

    // Freemarker.
    compile 'org.freemarker:freemarker:2.3.28'

    // Content type detection.
    compile 'com.j256.simplemagic:simplemagic:1.14'

    // Test dependencies.
    // JUnit and matchers.
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.3.2'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.3.2'

    testCompile 'org.assertj:assertj-core:3.11.1'

    // Mockito.
    testCompile 'org.mockito:mockito-core:2.23.4'

    // Test helpers.
    testCompile 'com.github.stefanbirkner:system-rules:1.19.0'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:3.1.4'
}

checkstyle {
    toolVersion = '8.16'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.2'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Cacofony'
                packaging 'jar'
                description 'A hand-made HTTP server with a Symfony feel'
                url 'https://git.wukl.net/wukl/cacofony'

                scm {
                    connection 'scm:git:https://git.wukl.net/wukl/cacofony.git'
                    developerConnection 'scm:git:ssh://git.wukl.net/wukl/cacofony.git'
                    url 'https://git.wukl.net/wukl/cacofony.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'wukl'
                        name 'Luc Everse'
                        email 'luc@wukl.net'
                    }
                }
            }
        }
    }
}
